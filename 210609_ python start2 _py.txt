'''
print(5)
print(-10)
print(3.14)

print(5+3)
print(2*8)
print(3*(3+1))

print('풍선')
print("나비")
print('3')
print("ㅋ"*9)

print(5 > 10)
print(1 <2)

print(not(1>2))

'''

## 애완동물 소개 ##


# animal = "강아지"
# name = "연탄이"
# age = 4
# hobby = "산책"
# is_adult = age>=3

# print("우리집 " + animal + "의 이름은 "+name + "에요" )
# print(name + "는 "+ str(age) +"살이며, "+ hobby + "을 아주 좋아해요") ## print문에서 숫자나 불리안을 사용하기 위해서는 위에서 문자형으로 만들어 버리던가 print안에서 str()을 넣어준다.
# print(name + "는 어른일까요? "+ str(is_adult)) ## 위에서 문자형으로 만들어도 실행은 되나 경고문?이 뜨니 맘편히 str을 써서 없애자.

# print(name, "는 어른일까요? ", is_adult) ## ,로 할경우 정수형이나 불리안도 쓸 수 있으나, 실행해보면 ,는 강제적으로 공백 한칸이 띄워서 실행하게 된다.

## 퀴즈1 ##

# class subway:
#     def __init__(self,station_name ):
#         self.station_name = station_name
#         print(station_name+"행 열차가 들어오고 있습니다.")

#     def Station(self,station):
#         print(station+"행 열차가 들어오고 있습니다.")

# subway("사당").Station # Station에 ()를 붙이면 오류가 뜬다. 왜냐하면 인수가 필요하기 때문이다. 내가 그렇게 설정했으니...
#                             # 그렇다고 subway("사당").Station("사당") 하면 두번 뜬다 ㅋ.

## 퀴즈1의 편한? 정답 ##
# class subway:
#     def __init__(self,station_name ):
#         self.station_name = station_name
#         print(station_name+"행 열차가 들어오고 있습니다.")

# subway("사당") 
# subway("신도림")
# subway("인천공항")

# class person:
#     name = "워니"

#     def say_hellow(self):
#         print("hi. 나는 " + self.name)


# p = person()
# p.say_hellow()


# class subway:
#     station_name = "사당"

#     def station(self):
#         print(self.station_name+ "행 열차가 들어오고 있습니다.")  

# subway().station() # 위에거랑 뭔 차이가 있고 왜 틀렸는지 모르겠다. 
#                     # 아 알았다 .멍청하게도 subway().station_name이 아닌 subway().station()을 해야한다... 당연한거다.. 20분동안 고민했네..


## 연산 ## 

# print(abs(-5))
# print(pow(4,2))
# print(max(5,12))
# print(min(5,12))
# print(round(3.14))
# print(round(4.99))

# from math import *
# print(floor(4.99)) # 내림
# print(ceil(3.14)) #올림
# print(sqrt(16)) #제곱근  

# from random import *

# print(random())

# print(randint(1,45))


# ## 퀴즈2  정답##

# offline_study = randint(4,28)
# print("오프라인 스터디 모임 날짜는 매월 "+str(offline_study)+" 일로 선정되었습니다.")

# offline_study = randint(1,28) ## 간단히 쓴 정답을 조금 풀어쓴 답.
# while(1):

#     if( 0<offline_study<4 ):
        
#             print("1,2,3  중 한 개가 선택되어 다시 뽑습니다.")
#             continue

        
#     else:
#         print("오프라인 스터디 모임 날짜는 매월 "+str(offline_study)+" 일로 선정되었습니다.")    
#         break
            ## 두번째 변경에서 내가 좀 걸린이유 : c언어랑 코드 쓰는법을 햇갈림.. c언어에서는 if { 자동으로 쓰는 습관이 예기치 않게 있음.}

## 문자열 ##

# sentence = """
# 찬란했던 과거를 추억하고,
# 현재의 상황에 대해 과거를 후회하며,
# 허망된 미래를 위해 과거를 망각하며 도망친다.
# """

# print(sentence)

# jumin= "990120-1234567"

# print(" 성별 : " + jumin[7])
# print("년도 : "+ jumin[0:2])
# print("뒤 7자리 : "+jumin[7:])
# print("뒤 7자리(뒷자리부터) : "+jumin[-7:]) ## -는 맨 뒷숫자이 7이 0으로 취급하여, 시작한다.

# sentence = "Python is Amazing"
# print(sentence.lower())
# print(sentence.upper())
# print(sentence[0].isupper())
# print(len(sentence))
# print(sentence.replace("Python","Java"))

# print(sentence.index("n"))

# index=sentence.index("n")
# print(sentence.index("n",index +1))

# print(sentence.find("n"))
#             ## find함수는 특정 단어가 없을경우 프로그램을 오류나지않고 -1로 출력 해주며, index는 특정단어가 없을경우 바로 에러를 낸다.
# print(sentence.count("n"))

## 문자열 ##


#         ##print 방법 1##
# print("나는 %d입니다." % 20)
# print("나는 %s을 좋아해요."%"파이썬") ## 숫자, 문자 둘다 됨.
# print("apple의 첫글자는 %c입니다."%"a")

# print("나는 %s색과 %s을 좋아해요"%("초록","핑크"))


#         ##print 방법 2##

# print("나는 {}살입니다.".format(20))
# print("나는 {}색과 {}색을 좋아해요.".format("파란","핑크"))
# print("나는 {0}색과 {1}색을 좋아해요.".format("파란","핑크"))
# print("나는 {1}색과 {0}색을 좋아해요.".format("파란","핑크"))


#         ##print 방법 3##

# print("나는 {age}살이며,  {color}색을 좋아해요.".format(age=20, color="빨간"))


#         ##print 방법 4##

# age= 20
# color = "빨간"
# print(f"나는 {age}살이며,  {color}색을 좋아해요.") ## 뭐 만들떄 편할거같네  개인적으로 방법 1,4 ->2 ->3 순으로 편할듯.

#         ##탈출문자##


# print("저는 \"나도코딩\"입니다.") ## 문장 내에서 따음표처럼 사용 가능.
# print("저는 \'나도코딩\'입니다.")

# print("\\") ## \\는 문장내에서 \이다. 출력시에도 \로 나온다. 그러므로 파일 위치 경로를 쓸때 자동으로 한개의 \ 만 나오지만 파이썬에 입력하고싶으면 \\두번 해줘야한다.

# print("Red Apple\rPine") ## \r글자 = 커서를 맨 앞으로 이동한다 . Red Apple 에서는 "Red "가 커서의 맨 처음이라서 Pine 으로 대체한 것.

# print("Redd\bApple") ## \b = \b의 바로 앞 한글자를 삭제

# print("Red \t apple") ##\t = tap키


#  ## 퀴즈 3 ## // 알바 다녀오고 하기.

# url = "http://naver.com"
# my_str = url.replace("http://","")
# my_str = my_str[:my_str.index(".")]
# password = my_str[:3] + str(len(my_str)) + str(my_str.count("e")) + "!"

# print(password)



## 리스트 ##


# subway = [ 10,20,30]
# print(subway)

# mix_list = ["조세호", 20, True] ## 다양한 자료형과 사용가능
# print(mix_list)


# subway = ["유재석", "조세호", "박명수"]
# print(subway)


# print(subway.index("조세호"))

# subway.append("하하") ## append() = 끝에 특정단어를 추가.
# print(subway)

# subway.insert(1,"정형돈") ## insert(어디에 넣고, 어떤데이터)
# print(subway)

# print(subway.pop()) ## pop() = 마지막의 배열을 하나 뺌

# print(subway.count("하하"))  ## count() = 특정단어가 몇개있는지[ 단 하하는 위에 pop으로 마지막단어인 하하가 빠져서 0개로 출력]
# print(subway.count("조세호")) ## count() = 특정단어가 몇개있는지

#                 #정렬방법 두가지!#

# num_list = [ 5,3,2,1,4]
# print(sorted(num_list)) ## 정렬된 신규 데이터. ##오름차순

# print(sorted(num_list,reverse=True)) ## 내림차순



# num_list = [ 5,3,2,1,4]
# num_list.sort() ## 정렬된 기존 데이터
# print(num_list)

# num_list.sort(reverse=True)
# print(num_list)


# num_list = [5,3,2,1,4]
# num_list.reverse() ## sort는 작은 -> 큰수 // reverse는 그냥 리스트 배열을 반대로..
# print(num_list)

# num_list.extend(mix_list) ## extend = 다른 리스트 함수를 추가할려는 리스트에 추가.
# print(num_list)

# num_list.clear() ## clear() list 삭제.
# print(num_list) 

## 딕션너리 ##

# cabinet = {3 : "유재석", 100:"김태호"}
# print(cabinet)
# print(cabinet[3])
# print(cabinet.get(3))

# # print(cabinet[5]) ## cabinet에 "5"라는 key가 없기에 안나오고, 바로 프로그램이 종료된다.
# # print("hi") ## 오류가 떴기에 뒤에 문장을 시도하지 않고 종료됨..

# print(cabinet.get(5)) ## cabinet에 없지만 오류가 아닌 None으로 뜨고 뒤에 문장도 이어진다
# print("hi")

# print(3 in cabinet) ## cabinet에 찾으려는 key값이 있는지 여부
# print(5 in cabinet)

# cabinet = {"A-3" : "유재석", "B-100":"김태호"}
# print(cabinet["A-3"])

# cabinet["C-20"]="조세호" ## 딕션너리 확장가능
# print(cabinet)

# cabinet["C-20"] = "김종국" ## 기존의 key와 같으면 기존의 key에 value값이 갱신된다.
# print(cabinet)

# del cabinet["A-3"] ## A-3에 대한 key를 입력하면 key와 value값이 동시에 사라진다.
# print(cabinet)

# print(cabinet.keys()) ## 키들만 출력
# print(cabinet.values()) ## 벨류들만 출력
# print(cabinet.items()) ## 키들과 벨류들을 출력
# cabinet.clear() ## 딕션너리 삭제.
# print(cabinet)

## 튜플 ##

# menu = ("돈까스", "고구마치즈돈까스")

# print(menu[0])
# print(menu[1])

#         ### menu.add 라던지 menu.remove() 등 불가능 불변형이라서.

# name = "김종국"
# age = 20
# hobby = "코딩"
# print(name, age, hobby)

# (name, age, hobby) = ("유재석", 25, "파이썬")
# print(name, age, hobby)

## 세트 ## 
            ## 리스트는 abc = [] / 딕션너리는 d= {abc : 100} /  튜플 e = () /  세트 = f = {}

        ## 세트는 중복안되며, 순서가 없음

# my_set = {1,2,3,3,3}
# print(my_set)

# Java = {"유재석", "김태호", "양세형"}
# Python = set(["유재석", "박명수"]) ## 리스트밖에 set으로 묶으면 자료형태는 set으로 바뀐다.

#     #교집합
# print(Java & Python)
# print(Java.intersection(Python))

#     #합집합
# print(Java | Python)
# print(Java.union(Python))

#     #차집합
# print(Java - Python)
# print(Java.difference(Python))

#     # 집합에서의 갯수 추가
# Python.add("김태호")
# print(Python)

#     # 집합에서의 갯수 삭제
# Java.remove("김태호")
# print(Java)


## 자료구조의 변경 ##

# menu = {"커피", "우유","주스"}
# print(menu, type(menu))

# menu = list(menu)
# print(menu, type(menu))

# menu = tuple(menu)
# print(menu, type(menu))

# menu = set(menu)
# print(menu, type(menu))

## 퀴즈4 ##

# from random import *
# # lst = [1,2,3,4,5]
# # print(lst)
# # shuffle(lst) ## 무작위로 섞는 함수
# # print(lst)
# # print(sample(lst,1)) ## sample() 특정데이터에서 몇개만큼 뽑겠다는 함수

# users = range(1,21) # 1 부터 20까지 숫자를 생성
# print(users) # type이 range라서 1....20 까지 안나옴
# print(type(users))
# users = list(users) 
# print(users)

# shuffle(users)
# win = sample(users,4)

# print(" 당첨자 발표")
# print("치킨 당첨자 = " + str(win[0]) )
# print("커피 당첨자 = " , str(win[1]) , str(win[2]), str(win[3]))
# print(" 축하합니다.")

# ## 또다른 프린트.

# print("치킨 당첨자 = {0}".format(win[0]))
# print("치킨 당첨자 = {0}".format(win[1:]))

        ## 개인적으로 이런 버전 말고 일일이 넣어서 추가하는 방식으로 해보고싶음
        ## ex) 테크워니 보이에서 나온 과일 세기 


## if ##

# weather = input("오늘 날씨는 어때요? : ") ## c언어의 scan_f 같은 친구의 역활을 한다.
# if weather == "비":
#     print("우산을 챙기세요")
# elif weather == "미세먼지":
#     print("마스크를 챙기세요")
# else:
#     print("준비물이 필요 없어요.")

# temp = int(input("기온은 어떄요? (숫자만 입력)"))
# if 30 <= temp:
#     print(" 너무 더워요.")
# elif 10<= temp:
#     print(" 적당한 날씨에요")
# elif 0<=temp:
#     print("외투를 챙기세요")
# else:
#     print("너무 추워요.")

## for ##

# for watiring in [0,1,2,3,4]:
#     print("대기번호 {0}".format(watiring))

# for waiting in range(5):
#     print("대기번호 {0}".format(waiting))

# for waiting in range(10,20):
#     print("대기번호 {0}".format(waiting))

# Hero = ["아이언맨", "토르", " 아이엠 그루트"]
# for customer in Hero:
#     print (" {0}님 출격 준비가 되었습니다".format(customer))

## while ##

# Hero = "토르"
# index = 5
# while index >=1:
#     print("{0}, 커피가 준비되었습니다. {1} 번 남았습니다.".format(Hero,index))
#     index -= 1
#     if index ==0:
#         print("커피는 폐기처분되었습니다.")

        ## while True: 는 break나 exit? 로 나가는거 아니면 무한루프로 돌아간다.
            ## 이럴때 대처법은 ctrl + C 누르면 강제종료된다.

# customer = "토르"
# person = "Unknown"

# while person != customer :
#     print("{0}, 커피가 준비되었습니다.".format(customer))
#     person = input("이름이 어떻게 되세요? ")

## continue / break ##
# absent = [2,5]
# no_book = [7]
# for student in range(1,11):
#     if student in absent:
#         continue
#     elif student in no_book:
#         print("오늘 수업은 여기까지 {0}는 교무실로 따라와".format(student))
#         break
#     print("{0}야 책을 읽어봐".format(student))

# students =[1,2,3,4,5]
# print(students)
# students = [i+100 for i in students] ## students에 1,2,3,4,5가 들어있는데 거기에 100을 더한값을 적용하는것.
# print(students)

# students = ["Iron amn","Thor", "I am groot"]
# students = [len(i) for i in students] ## 문자 길이
# print(students)

# students = [i for i in range(1,6)]
# print(students)

# students = ["Iron amn","Thor", "I am groot"]
# students = [i.upper() for i in students]
# print(students)

## 퀴즈 5 ##





## 함수 ##

# def open_account():
#         print("새로운 계좌가 생성되었습니다.")
# open_account()

# def deposit(balance, money): ## 예금의 정보
#         print("입금이 완료되었습니다. 잔액은 {0} 원 입니다.".format(balance + money)) 
#         return balance + money ## balance의 반환값을 balance + money 로 

# def withdraw(balance, money): ## balance =잔액
#         if balance >= money:
#                 print("출금이 완료되었습니다. 잔액은 {0}입니다.".format(balance-money))
#                 return balance-money
#         else:
#                 print("잔액이 부족하여 출금이 완료되지 않았습니다. 잔액은 {0}입니다.".format(balance))
#                 return balance

# def withdraw_night(balance, money): 
#         commission = 100
#         return commission, balance-money-commission ## 커미션과 최종 출금금액을 같이 보여줌



# balance = 0
# balance = deposit(balance, 1000)
# print(balance)

# commission, balance = withdraw_night(balance, 500)
# print("수수료{0}원이며, 잔액은 {1}원 입니다.".format(commission,balance))


## 기본값 ##

# def profile(name, age, main_lang): ## \하면 두문장처럼 보이지만 한문장이다
#         print("이름 : {0},\t 나이 : {1} \t 주 사용 언어: {2}"  \
#                 .format(name, age, main_lang))

# profile("유재석",20,"파이썬")
# profile("김태호",25,"자바")     



# def profile(name, age= 17, main_lang="파이썬"): ## 이렇게 안에 설정해놓으면 기본값으로 된다.
#         print("이름 : {0},\t 나이 : {1} \t 주 사용 언어: {2}"  \
#                 .format(name, age, main_lang))
# profile("유재석")
# profile("김태호")
    
# def profile(name, age, main_lang):
#         print(name, age, main_lang)

# profile(name="유재석",main_lang="파이썬",age=20)
# profile(main_lang="자바",age=25,name="김태호" )

## 가변 인자 ##

# def profile(name, age, lang1, lang2, lang3, lang4, lang5):
#         print("이름 : {0}\t 나이 : {1}\t".format(name, age), end=" ") ## end = "" 는 원래 줄바꿈으로 진행했으나, 그냥 이어쓰기로 한다는 뜻. 
#         print(lang1,lang2,lang3,lang4,lang5)

# profile("유재석",20,"파이썬","자바","C","","")
# profile("김태호",25,"swift","","","","")

# def profile(name, age, *language): ## 사용자가 원하는만큼 넣을수 있게함
#         print("이름 : {0}\t 나이 : {1}\t".format(name, age), end=" ") ## end = "" 는 원래 줄바꿈으로 진행했으나, 그냥 이어쓰기로 한다는 뜻. 
#         for lang in language: ## 그러므로 language 안에 포함된 것들은 lang에 넣어버리기
#                 print(lang, end="")
#         print()

# profile("유재석",20, "파이썬" ,"자바","C","C++")  ## 위에꺼의 장점은 위위에 꺼는 지정한 크기만큼만 쓸수 있지만 이것은 지정한 크기를 넘어서 계속 늘어나면서 쓸수 있기에
                                                        ## 편리하다.
# profile("김태호",25,"swift")

## 지역변수와 전역변수 ##
# gun = 10
# def checkpoint(soldiers): ## 경계근무
#         global gun # 전역 공간에 있는 gun 사용 / 지역변수가 아닌 전체에서 gun이라는 것을 하나로 통일 하겠다는 뜻.   
#         gun = gun - soldiers ## 여기서 두번째 gun = 'gun' - soldiers 의 'gun'은 지역변수라고 하며, 위에 gun = 10 의 gun이랑은 다른 함수이다. c언어에서도 따로 지정해야 했었다.
#         print("[함수 내] 남은 총 : {0}".format(gun))

# def checkpoint_ret(gun,soldiers):
#         gun = gun - soldiers
#         print("[함수 내] 남은 총 : {0}".format(gun))
#         return gun ## 10 -2 = 8 값을 gun으로 최종값으로 호출해서 밑에 gun이 8이 됨

# print("전체 총 : {0}".format(gun))
# # checkpoint(2) ## 2명이 경계근무 나감
# gun = checkpoint_ret(gun,2)


# print("남은 총 : {0}".format(gun))        


## 퀴즈7 ##

# def str_weight(height, gender):
#         if gender =="남자":
#                 return height * height  * 22 
               
#         else:
#                 return height * height  * 21 
                
# height = 175
# gender = "남자"

# weight = round(str_weight(height/100,gender),2) ## 왜 수식 안에다가 /100 하면 6737.5가 나오지.. 
# print(weight)
# print("키 {0}cm 남자의 표준 체중은 {1}입니다.".format(height,weight))

## 표준입출력 ##
# print("파이썬", "자바",sep= " ")

# print("파이썬", "자바",sep= " vs ")

# print("파이썬", "자바",sep= ",", end="?")

# print("END=''는 이어쓰기가 된다." )

# scores = {"수학" : 0, "영어" : 50, "코딩": 100}
# for subject, score in  scores.items(): ## .items() 는 딕션너리를 각 키와 벨류로 분류해서 묶어서 보여줌
#         print(subject.ljust(8), str(score).rjust(4))  ## ljust(8)은 왼쪽정렬을 하되 8크기를 확보해서 한다. rjsuct는  4크기를 확보해서 오른쪽 정렬한다.

# for num in range(1,21):
#         print("대기번호 : " + str(num).zfill(3)) ## .zfill()은 001 002 처럼 빈공간에 0을 채워준다 안에 숫자는 크기를 말한다.

# print("{0:>10}".format(500)) ## 빈공간은 그대로 두고, 오른쪽 정렬을 하되, 총10자리를 확보
# print("{0:<+10}".format(500)) ## 빈공간은 그대로 두고, 왼쪽 정렬을 하되, 총10자리를 확보, 양수일땐 + 음수일땐 - 표시
# print("{0:>+10}".format(-500))

# print("{0:_<10}".format(-500)) ## 빈공간은 _로 채우고, 왼쪽 정렬을 하되, 총 10자리를 확보

# print("{0:,}".format(100000000)) ## 3자리 마다 , 를 넣기
# print("{0:+,}".format(100000000)) ## 3자리 마다 , 를 넣고, + - 를 붙이기

# print("{0:^<+30,}".format(100000000)) ## 빈공간은 ^로 채우고, 왼쪽정렬을 하되, 총 30자리를 확보, +-를 표시하고, 3자리 마다 ,붙이기

# print("{0:f}".format(5/3)) ## 소수점 표시
# print("{0:.2f}".format(5/3)) ## 소수점 3번째에서 반올림하기.

## 파일 입출력##

# score_file = open("score.txt", "w", encoding="utf8" ) ## w는 쓰기
# print("수학 : 0", file=score_file)
# print("영어 : 50", file=score_file)
# score_file.close()

# score_file = open("score.txt","a",encoding="utf8") ## a는 이어쓰기
# score_file.write("과학 : 80")
# score_file.write("\n코딩 : 100") ## .write로 하면 자동으로 줄바꿈이 안된다 . / print랑 차이점
# score_file.close()

# score_file = open("score.txt","r",encoding="utf8") ## r은 읽기
# print(score_file.read())
# score_file.close()

# score_file = open("score.txt", "r", encoding="utf8") ## 이방법은 한줄씩 읽고 싶을때 하는 방법
# print(score_file.readline(),end="")
# print(score_file.readline(),end="")
# print(score_file.readline(),end="")
# print(score_file.readline(),end="") 
# score_file.close

# score_file = open("score.txt","r",encoding="utf8") ## 몇줄인지 모르지만 다 읽고 싶을때
# while(1):
#         line = score_file.readline() ## 다만 짧은 코드로 전체 보고싶으면 걍 .read() 로 하면될듯. 
#                     ## 궁금한점은 이건 라인에 아무것도 없을때까지라서 문단마다 보고싶을땐 좋을듯
#         if not line:
#                 break
#         print(line,end="")
# score_file.close()

## pickle 피클 ##

# import pickle
# profile_file = open("profile.pickle", "wb")
# profile = {"이름 ":"박명수", "나이":30, "취미":["축구","골프","코딩"]}
# print(profile)
# pickle.dump(profile, profile_file) ## profile에 있는 정보를 file에 저장
# profile_file.close()

# import pickle
# profile_file = open("profile.pickle","rb") ## 피클 파일 열기
# profile = pickle.load(profile_file) ## 피클 파일 읽기
# print(profile)
# profile_file.close() ## 피클 파일 닫기

# import pickle

# with open("profile.pickle","rb") as profile_file: ## profile.pickle 불러서 profile_file로 변수로 저장하여 pickle.load로 불러오기.
#         print(pickle.load(profile_file)) ## 장점 close()를 안해도 된다.

# with open("study.txt", "w", encoding="utf8") as study_file: ## 편하게 써서 저장도 된다.
#         study_file.write("파이썬을 열심히 공부하고 있어요") 

# with open("study.txt","r",encoding="utf8") as study_file: ## 편하게 읽기 가능하다
#         print(study_file.read())

## 클래스 ##

# class Unit:
#         def __init__(self,name, hp,damage):
#                 self.name = name
#                 self.hp = hp
#                 self.damage = damage
#                 print("{0} 유닛이 생성되었습니다.".format(self.name))
#                 print("체력 {0}, 공격력 {1}".format(self.hp, self.damage))

# marine1 = Unit("마린",40,5)
# marine2 = Unit("마린",40,5)
# tank = Unit("탱크",150,35)

## 맴버 변수 ##
# class Unit:
#         def __init__(self,name, hp,damage):
#                 self.name = name
#                 self.hp = hp
#                 self.damage = damage
#                 print("{0} 유닛이 생성되었습니다.".format(self.name))
#                 print("체력 {0}, 공격력 {1}".format(self.hp, self.damage))

# wraith1 = Unit("레이스",80,5)
# print("유닛 이름 : {0}, 공격력 : {1}".format(wraith1.name, wraith1.damage)) ## 맴버 변수를 외부에서 사용 가능

# wraith2 = Unit("빼앗은 레이스",80,5)
# wraith2.clocking = True ## 추가로 외부에서 변수를 만들어서 쓸수 있다.

# if wraith2.clocking == True: 
#         print("{0}는 현재 클로킹 상태입니다.".format(wraith2.name)) ## 레이스2에만 클로킹 설정해놔서 레이스1에는 class Unit에 없기에 적용이 안된다.


## 매소드 ##

# class Unit:
#         def __init__(self,name, hp,damage):
#                 self.name = name
#                 self.hp = hp
#                 self.damage = damage
#                 print("{0} 유닛이 생성되었습니다.".format(self.name))
#                 print("체력 {0}, 공격력 {1}".format(self.hp, self.damage))
        
# class AttacUnit:
#         def __init__(self,name, hp,damage):
#                 self.name = name
#                 self.hp = hp
#                 self.damage = damage
        
#         def attack(self, location):
#                 print("{0} : {1} 방향으로 적군을 공격 합니다. [공격력 {2}]"\
#                         .format(self.name,location,self.damage)) ## self는 정의된 함수내에서 명령대로 사용하겠다는 선언문? 같은개념 / location은 없기에 그냥 location 쓰겟다.
#         def damaged(self,damage):
#                 print("{0} : {1} 데미지를 입었습니다.".format(self.name,damage))
#                 self.hp -= damage
#                 print("{0} : 현재 체력은 {1} 입니다.".format(self.name, self.hp))
#                 if self.hp <=0:
#                         print("{0} : 파괴되었습니다.".format(self.name))

# firebet1 = AttacUnit("파이어뱃",50,16)
# firebet1.attack("5시")

# firebet1.damaged(25)
# firebet1.damaged(25)

## 상속 ##

# from typing import Awaitable


# class Unit:
#         def __init__(self,name, hp, speed):
#                 self.name = name
#                 self.hp = hp
#                 self.speed = speed
        
#         def move(self, location):
#                 print("[지상 유닛 이동]")
#                 print("{0} : {1} 방향으로 이동합니다. [속도 {2}"\
#                         .format(self.name,location,self.speed))
        
# class AttacUnit(Unit): ## 공격유닛은 유닛을 상속받아서 정의하게 됨.
#         def __init__(self,name, hp, speed, damage):
#                 # self.name = name  ## 유닛을 상속했기에 필요 없어짐.
#                 # self.hp = hp
#                 Unit.__init__(self,name,hp, speed) ## 이렇게 하면 유닛을 상속한다.
#                 self.damage = damage
        

#         def attack(self, location):
#                 print("{0} : {1} 방향으로 적군을 공격 합니다. [공격력 {2}]"\
#                         .format(self.name,location,self.damage)) 
#         def damaged(self,damage):
#                 print("{0} : {1} 데미지를 입었습니다.".format(self.name,damage))
#                 self.hp -= damage
#                 print("{0} : 현재 체력은 {1} 입니다.".format(self.name, self.hp))
#                 if self.hp <=0:
#                         print("{0} : 파괴되었습니다.".format(self.name))

# firebet1 = AttacUnit("파이어뱃",50,2,16)
# firebet1.attack("5시")

# firebet1.damaged(25)
# firebet1.damaged(25)

# ## 다중 상속 ##

# class Flyable:
#         def __init__(self, flying_speed):
#                 self.flying_speed = flying_speed

#         def fly(self, name, location):
#                 print("{0} : {1} 방향으로 날아갑니다. [속도 {2}]".format(name, location, self.flying_speed))

# class FlyableAttackUnit(AttacUnit, Flyable): ##여기에 move함수를 따로 설정안하면 배틀크루져가 지상유닛 이동으로 출력된다.
#         def __init__(self, name, hp, damage, flying_speed):
#                 AttacUnit.__init__(self, name, hp,0 , damage) ## 지상 속도는 0으로 처리
#                 Flyable.__init__(self, flying_speed) 

#         def move(self, location):
#                 print("[공중 유닛 이동]")
#                 self.fly(self.name, location)
# valkyrie = FlyableAttackUnit("발키리",200,6,5) 
# valkyrie.fly(valkyrie.name,"3시")

# ## 매소드 오버라이딩 ## // 자식클래스에서 정의한 매소드를 쓰고 싶은 경우 ( 오버라이딩)

# vulture = AttacUnit("벌쳐", 80 , 10, 20)

# balltlecruiser = FlyableAttackUnit("배틀크루저", 500, 25, 3)


# vulture.move("11")
# balltlecruiser.move("9시") 

## pass ##

# def game_start():
#         print("[알림] 새로운 게임을 시작합니다.")

# def game_over():
#         pass

# game_start()
# game_over() ## 패스란 아무것도 적지 않아도 그냥 넘어가고 진행한다.

## super ##

# class buildingUnit(Unit):
#         def __int__(self, name, hp, location):
#                 Unit.__init__(self, name, hp, speed) ## 상속받은 클래스를 초기화 하는 방법 1
#                 super().__init__(name,hp,0) ## 위에거랑 다른점 / 1. self는 안쓴다. 2. super()로 써야한다. 3. 다중 상속시 순서에 영향을 미친다.
#                 self.location = location

               ## super의 다중상속의 문제점 . (순서에 영향을 미치는거) 밑에대로 하면 ABC 생성자만 나온다. 맨 처음의 상속받은 클래스만 호출되기에 ABC만 나온다.
                       ## 다중 상속 클래스의 초기화가 필요하면 Unit.__init__ 방식으로 해야한다.
# class ABC:
#         def __init__(self):
#          print("ABC 생성자")

# class ABD:
#         def __init__(self):
#          print("ABD 생성자")

# class CD(ABC,ABD):
#         def __init__(self):
#                 super().__init__()

# test = CD()

## 퀴즈 8 ##




## 예외 처리 ##

# print("나누기 전용 계산기입니다.")
# num1 = int(input("첫 번째 숫자를 입력하세요 : "))
# num2 = int(input("두 번째 숫자를 입력하세요 : "))
# print("{0} / {1} = {2}".format(num1,num2,int(num1/num2))) ## 만약 첫 번째나 두번째에 한글 입력시 오류 발생 할때 처리하는 방법이 예외 처리

# try: ## 트라이 내부의 문장을 실행하다가 오류가 발생시 벨류에러의 문장을 실행해준다.

#         print("나누기 전용 계산기입니다.")
#         num1 = int(input("첫 번째 숫자를 입력하세요 : "))
#         num2 = int(input("두 번째 숫자를 입력하세요 : "))
#         #print("{0} / {1} = {2}".format(num1,num2,int(num1/num2))) 

# except ValueError:
#         print("에러! 잘못된 값을 입력하였습니다")

# except ZeroDivisionError as err: ## 에러 발생시의 제로 디비젼이나 벨루 에러같은것은 트라이의 내의 문구를 실행 했을때 int문을 한글로 섰을때 따로 오류로 valueerror : 하면서 뜨거나 제로 디비젼하면서 알려준다.
#         print(err)


# try: ## 트라이 내부의 문장을 실행하다가 오류가 발생시 벨류에러의 문장을 실행해준다.

#         print("나누기 전용 계산기입니다.")
#         nums = []
#         nums.append(int(input("첫 번째 숫자를 입력하세요 : ")))
#         nums.append(int(input("첫 번째 숫자를 입력하세요 : ")))
#         # nums.append(int(nums[0] / nums[1]))
#         print("{0} / {1} = {2}".format(num1,num2,int(num1/num2))) 

# except ValueError:
#         print("에러! 잘못된 값을 입력하였습니다")

# except ZeroDivisionError as err: ## 에러 발생시의 제로 디비젼이나 벨루 에러같은것은 트라이의 내의 문구를 실행 했을때 int문을 한글로 섰을때 따로 오류로 valueerror : 하면서 뜨거나 제로 디비젼하면서 알려준다.
#         print(err)
# except Exception as err:
#         print("알수없는 오류가 발생!") ## 만약 오류 내용을 알고 싶으면 exception as err 쓰기
#         print(err)

## 에러 발생시키기 ##

# try:
#         print("한 자리 숫자 전용 계산기입니다.")
#         num1 = int(input("첫 번째 숫자를 입력하세요 : "))
#         num2 = int(input("첫 번째 숫자를 입력하세요 : "))
#         if num1>= 10 or num2 >= 10:
#                 raise ValueError ## 인위적으로 abc 같은걸로 정의 하면 안됨.
#         print("{0} / {1} = {2}".format(num1,num2,int(num1/num2)))
# except ValueError:
#         print("잘못된 값을 입력하였습니다. 한 자리 숫자만 입력하세요.")

## 사용자 정의 예외처리 ##

# class bignumbererror(Exception):
#         pass
# try:
#         print("한 자리 숫자 전용 계산기입니다.")
#         num1 = int(input("첫 번째 숫자를 입력하세요 : "))
#         num2 = int(input("첫 번째 숫자를 입력하세요 : "))
#         if num1>= 10 or num2 >= 10:
#                 raise bignumbererror ## 사용자의 정의하여 에러 발생시키는 방법 
#         print("{0} / {1} = {2}".format(num1,num2,int(num1/num2)))
# except ValueError:
#         print("잘못된 값을 입력하였습니다. 한 자리 숫자만 입력하세요.")

# except bignumbererror:
#         print("에러가 발생!! .한 자리 숫자만 입력")

# class bignumbererror(Exception):
#         def __init__(self,msg): ##바생 메세지 설정 방법
#                 self.meg = msg

#         def __str__(self):
#                 return self.meg
# try:
#         print("한 자리 숫자 전용 계산기입니다.")
#         num1 = int(input("첫 번째 숫자를 입력하세요 : "))
#         num2 = int(input("첫 번째 숫자를 입력하세요 : "))
#         if num1>= 10 or num2 >= 10:
#                 raise bignumbererror("입력값 : {0}, {1}".format(num1,num2))
#         print("{0} / {1} = {2}".format(num1,num2,int(num1/num2)))
# except ValueError:
#         print("잘못된 값을 입력하였습니다. 한 자리 숫자만 입력하세요.")

# except bignumbererror as err:
#         print("에러가 발생!! .한 자리 숫자만 입력")
#         print(err)
#         ## 전체적인 과정 설명 [ 10, 5를 입력하면 if문의 내용을 실행하여 bignumbererror에 msg를 저장하여 맨밑의 에러로 처리된다.  ]

## finally ## [ 오류든 정상이든 무조건 실행하게 만드는 명령어]

# class bignumbererror(Exception):
#         def __init__(self,msg): ##바생 메세지 설정 방법
#                 self.meg = msg

#         def __str__(self):
#                 return self.meg
# try:
#         print("한 자리 숫자 전용 계산기입니다.")
#         num1 = int(input("첫 번째 숫자를 입력하세요 : "))
#         num2 = int(input("첫 번째 숫자를 입력하세요 : "))
#         if num1>= 10 or num2 >= 10:
#                 raise bignumbererror("입력값 : {0}, {1}".format(num1,num2))
#         print("{0} / {1} = {2}".format(num1,num2,int(num1/num2)))
# except ValueError:
#         print("잘못된 값을 입력하였습니다. 한 자리 숫자만 입력하세요.")

# except bignumbererror as err:
#         print("에러가 발생!! .한 자리 숫자만 입력")
#         print(err)
# finally:
#         print("계산기를 이용해 주셔서 감사합니다")

## 퀴즈 9 ##




## 모듈 ## [ theater_module.py 파일을 만듬]

# import theater_module
# theater_module.price(3)
# theater_module.price_morning(4)
# theater_module.price_soldier(5)

# import theater_module as mv ## mv란  as 원하는단어로 지정하면 그 단어로 theater_module의 이름명을 대신 할 수 있다.

# mv.price_soldier(4)

# from theater_module import * ## 모듈에 있는 모든것을 사용하겠다는 의미

# price(3)   ## 각각 차이가 있다. 
# price_morning(4)

# from theater_module import price, price_morning ## 이렇게 특정 함수만 가져와서 사용 가능하다
# price(5)

# from theater_module import price_soldier as price ## theater_module에서 price_soldier라는 함수를 가져와서 price라고 이름을 정의하겠다. 라는 뜻

# price(5)

## 패키지 ##

