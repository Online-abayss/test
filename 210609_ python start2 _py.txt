'''
print(5)
print(-10)
print(3.14)

print(5+3)
print(2*8)
print(3*(3+1))

print('풍선')
print("나비")
print('3')
print("ㅋ"*9)

print(5 > 10)
print(1 <2)

print(not(1>2))

'''

## 애완동물 소개 ##


# animal = "강아지"
# name = "연탄이"
# age = 4
# hobby = "산책"
# is_adult = age>=3

# print("우리집 " + animal + "의 이름은 "+name + "에요" )
# print(name + "는 "+ str(age) +"살이며, "+ hobby + "을 아주 좋아해요") ## print문에서 숫자나 불리안을 사용하기 위해서는 위에서 문자형으로 만들어 버리던가 print안에서 str()을 넣어준다.
# print(name + "는 어른일까요? "+ str(is_adult)) ## 위에서 문자형으로 만들어도 실행은 되나 경고문?이 뜨니 맘편히 str을 써서 없애자.

# print(name, "는 어른일까요? ", is_adult) ## ,로 할경우 정수형이나 불리안도 쓸 수 있으나, 실행해보면 ,는 강제적으로 공백 한칸이 띄워서 실행하게 된다.

## 퀴즈1 ##

# class subway:
#     def __init__(self,station_name ):
#         self.station_name = station_name
#         print(station_name+"행 열차가 들어오고 있습니다.")

#     def Station(self,station):
#         print(station+"행 열차가 들어오고 있습니다.")

# subway("사당").Station # Station에 ()를 붙이면 오류가 뜬다. 왜냐하면 인수가 필요하기 때문이다. 내가 그렇게 설정했으니...
#                             # 그렇다고 subway("사당").Station("사당") 하면 두번 뜬다 ㅋ.

## 퀴즈1의 편한? 정답 ##
# class subway:
#     def __init__(self,station_name ):
#         self.station_name = station_name
#         print(station_name+"행 열차가 들어오고 있습니다.")

# subway("사당") 
# subway("신도림")
# subway("인천공항")

# class person:
#     name = "워니"

#     def say_hellow(self):
#         print("hi. 나는 " + self.name)


# p = person()
# p.say_hellow()


# class subway:
#     station_name = "사당"

#     def station(self):
#         print(self.station_name+ "행 열차가 들어오고 있습니다.")  

# subway().station() # 위에거랑 뭔 차이가 있고 왜 틀렸는지 모르겠다. 
#                     # 아 알았다 .멍청하게도 subway().station_name이 아닌 subway().station()을 해야한다... 당연한거다.. 20분동안 고민했네..


## 연산 ## 

# print(abs(-5))
# print(pow(4,2))
# print(max(5,12))
# print(min(5,12))
# print(round(3.14))
# print(round(4.99))

# from math import *
# print(floor(4.99)) # 내림
# print(ceil(3.14)) #올림
# print(sqrt(16)) #제곱근  

# from random import *

# print(random())

# print(randint(1,45))


# ## 퀴즈2  정답##

# offline_study = randint(4,28)
# print("오프라인 스터디 모임 날짜는 매월 "+str(offline_study)+" 일로 선정되었습니다.")

# offline_study = randint(1,28) ## 간단히 쓴 정답을 조금 풀어쓴 답.
# while(1):

#     if( 0<offline_study<4 ):
        
#             print("1,2,3  중 한 개가 선택되어 다시 뽑습니다.")
#             continue

        
#     else:
#         print("오프라인 스터디 모임 날짜는 매월 "+str(offline_study)+" 일로 선정되었습니다.")    
#         break
            ## 두번째 변경에서 내가 좀 걸린이유 : c언어랑 코드 쓰는법을 햇갈림.. c언어에서는 if { 자동으로 쓰는 습관이 예기치 않게 있음.}

## 문자열 ##

# sentence = """
# 찬란했던 과거를 추억하고,
# 현재의 상황에 대해 과거를 후회하며,
# 허망된 미래를 위해 과거를 망각하며 도망친다.
# """

# print(sentence)

# jumin= "990120-1234567"

# print(" 성별 : " + jumin[7])
# print("년도 : "+ jumin[0:2])
# print("뒤 7자리 : "+jumin[7:])
# print("뒤 7자리(뒷자리부터) : "+jumin[-7:]) ## -는 맨 뒷숫자이 7이 0으로 취급하여, 시작한다.

# sentence = "Python is Amazing"
# print(sentence.lower())
# print(sentence.upper())
# print(sentence[0].isupper())
# print(len(sentence))
# print(sentence.replace("Python","Java"))

# print(sentence.index("n"))

# index=sentence.index("n")
# print(sentence.index("n",index +1))

# print(sentence.find("n"))
#             ## find함수는 특정 단어가 없을경우 프로그램을 오류나지않고 -1로 출력 해주며, index는 특정단어가 없을경우 바로 에러를 낸다.
# print(sentence.count("n"))

## 문자열 ##


#         ##print 방법 1##
# print("나는 %d입니다." % 20)
# print("나는 %s을 좋아해요."%"파이썬") ## 숫자, 문자 둘다 됨.
# print("apple의 첫글자는 %c입니다."%"a")

# print("나는 %s색과 %s을 좋아해요"%("초록","핑크"))


#         ##print 방법 2##

# print("나는 {}살입니다.".format(20))
# print("나는 {}색과 {}색을 좋아해요.".format("파란","핑크"))
# print("나는 {0}색과 {1}색을 좋아해요.".format("파란","핑크"))
# print("나는 {1}색과 {0}색을 좋아해요.".format("파란","핑크"))


#         ##print 방법 3##

# print("나는 {age}살이며,  {color}색을 좋아해요.".format(age=20, color="빨간"))


#         ##print 방법 4##

# age= 20
# color = "빨간"
# print(f"나는 {age}살이며,  {color}색을 좋아해요.") ## 뭐 만들떄 편할거같네  개인적으로 방법 1,4 ->2 ->3 순으로 편할듯.

#         ##탈출문자##


# print("저는 \"나도코딩\"입니다.") ## 문장 내에서 따음표처럼 사용 가능.
# print("저는 \'나도코딩\'입니다.")

# print("\\") ## \\는 문장내에서 \이다. 출력시에도 \로 나온다. 그러므로 파일 위치 경로를 쓸때 자동으로 한개의 \ 만 나오지만 파이썬에 입력하고싶으면 \\두번 해줘야한다.

# print("Red Apple\rPine") ## \r글자 = 커서를 맨 앞으로 이동한다 . Red Apple 에서는 "Red "가 커서의 맨 처음이라서 Pine 으로 대체한 것.

# print("Redd\bApple") ## \b = \b의 바로 앞 한글자를 삭제

# print("Red \t apple") ##\t = tap키


#  ## 퀴즈 3 ## // 알바 다녀오고 하기.

# url = "http://naver.com"
# my_str = url.replace("http://","")
# my_str = my_str[:my_str.index(".")]
# password = my_str[:3] + str(len(my_str)) + str(my_str.count("e")) + "!"

# print(password)



## 리스트 ##


# subway = [ 10,20,30]
# print(subway)

# mix_list = ["조세호", 20, True] ## 다양한 자료형과 사용가능
# print(mix_list)


# subway = ["유재석", "조세호", "박명수"]
# print(subway)


# print(subway.index("조세호"))

# subway.append("하하") ## append() = 끝에 특정단어를 추가.
# print(subway)

# subway.insert(1,"정형돈") ## insert(어디에 넣고, 어떤데이터)
# print(subway)

# print(subway.pop()) ## pop() = 마지막의 배열을 하나 뺌

# print(subway.count("하하"))  ## count() = 특정단어가 몇개있는지[ 단 하하는 위에 pop으로 마지막단어인 하하가 빠져서 0개로 출력]
# print(subway.count("조세호")) ## count() = 특정단어가 몇개있는지

#                 #정렬방법 두가지!#

# num_list = [ 5,3,2,1,4]
# print(sorted(num_list)) ## 정렬된 신규 데이터. ##오름차순

# print(sorted(num_list,reverse=True)) ## 내림차순



# num_list = [ 5,3,2,1,4]
# num_list.sort() ## 정렬된 기존 데이터
# print(num_list)

# num_list.sort(reverse=True)
# print(num_list)


# num_list = [5,3,2,1,4]
# num_list.reverse() ## sort는 작은 -> 큰수 // reverse는 그냥 리스트 배열을 반대로..
# print(num_list)

# num_list.extend(mix_list) ## extend = 다른 리스트 함수를 추가할려는 리스트에 추가.
# print(num_list)

# num_list.clear() ## clear() list 삭제.
# print(num_list) 

## 딕션너리 ##

# cabinet = {3 : "유재석", 100:"김태호"}
# print(cabinet)
# print(cabinet[3])
# print(cabinet.get(3))

# # print(cabinet[5]) ## cabinet에 "5"라는 key가 없기에 안나오고, 바로 프로그램이 종료된다.
# # print("hi") ## 오류가 떴기에 뒤에 문장을 시도하지 않고 종료됨..

# print(cabinet.get(5)) ## cabinet에 없지만 오류가 아닌 None으로 뜨고 뒤에 문장도 이어진다
# print("hi")

# print(3 in cabinet) ## cabinet에 찾으려는 key값이 있는지 여부
# print(5 in cabinet)

# cabinet = {"A-3" : "유재석", "B-100":"김태호"}
# print(cabinet["A-3"])

# cabinet["C-20"]="조세호" ## 딕션너리 확장가능
# print(cabinet)

# cabinet["C-20"] = "김종국" ## 기존의 key와 같으면 기존의 key에 value값이 갱신된다.
# print(cabinet)

# del cabinet["A-3"] ## A-3에 대한 key를 입력하면 key와 value값이 동시에 사라진다.
# print(cabinet)

# print(cabinet.keys()) ## 키들만 출력
# print(cabinet.values()) ## 벨류들만 출력
# print(cabinet.items()) ## 키들과 벨류들을 출력
# cabinet.clear() ## 딕션너리 삭제.
# print(cabinet)

## 튜플 ##

# menu = ("돈까스", "고구마치즈돈까스")

# print(menu[0])
# print(menu[1])

#         ### menu.add 라던지 menu.remove() 등 불가능 불변형이라서.

# name = "김종국"
# age = 20
# hobby = "코딩"
# print(name, age, hobby)

# (name, age, hobby) = ("유재석", 25, "파이썬")
# print(name, age, hobby)

## 세트 ## 
            ## 리스트는 abc = [] / 딕션너리는 d= {abc : 100} /  튜플 e = () /  세트 = f = {}

        ## 세트는 중복안되며, 순서가 없음

# my_set = {1,2,3,3,3}
# print(my_set)

# Java = {"유재석", "김태호", "양세형"}
# Python = set(["유재석", "박명수"]) ## 리스트밖에 set으로 묶으면 자료형태는 set으로 바뀐다.

#     #교집합
# print(Java & Python)
# print(Java.intersection(Python))

#     #합집합
# print(Java | Python)
# print(Java.union(Python))

#     #차집합
# print(Java - Python)
# print(Java.difference(Python))

#     # 집합에서의 갯수 추가
# Python.add("김태호")
# print(Python)

#     # 집합에서의 갯수 삭제
# Java.remove("김태호")
# print(Java)


## 자료구조의 변경 ##

# menu = {"커피", "우유","주스"}
# print(menu, type(menu))

# menu = list(menu)
# print(menu, type(menu))

# menu = tuple(menu)
# print(menu, type(menu))

# menu = set(menu)
# print(menu, type(menu))

## 퀴즈4 ##

# from random import *
# # lst = [1,2,3,4,5]
# # print(lst)
# # shuffle(lst) ## 무작위로 섞는 함수
# # print(lst)
# # print(sample(lst,1)) ## sample() 특정데이터에서 몇개만큼 뽑겠다는 함수

# users = range(1,21) # 1 부터 20까지 숫자를 생성
# print(users) # type이 range라서 1....20 까지 안나옴
# print(type(users))
# users = list(users) 
# print(users)

# shuffle(users)
# win = sample(users,4)

# print(" 당첨자 발표")
# print("치킨 당첨자 = " + str(win[0]) )
# print("커피 당첨자 = " , str(win[1]) , str(win[2]), str(win[3]))
# print(" 축하합니다.")

# ## 또다른 프린트.

# print("치킨 당첨자 = {0}".format(win[0]))
# print("치킨 당첨자 = {0}".format(win[1:]))

        ## 개인적으로 이런 버전 말고 일일이 넣어서 추가하는 방식으로 해보고싶음
        ## ex) 테크워니 보이에서 나온 과일 세기 


## if ##

# weather = input("오늘 날씨는 어때요? : ") ## c언어의 scan_f 같은 친구의 역활을 한다.
# if weather == "비":
#     print("우산을 챙기세요")
# elif weather == "미세먼지":
#     print("마스크를 챙기세요")
# else:
#     print("준비물이 필요 없어요.")

# temp = int(input("기온은 어떄요? (숫자만 입력)"))
# if 30 <= temp:
#     print(" 너무 더워요.")
# elif 10<= temp:
#     print(" 적당한 날씨에요")
# elif 0<=temp:
#     print("외투를 챙기세요")
# else:
#     print("너무 추워요.")

## for ##

# for watiring in [0,1,2,3,4]:
#     print("대기번호 {0}".format(watiring))

# for waiting in range(5):
#     print("대기번호 {0}".format(waiting))

# for waiting in range(10,20):
#     print("대기번호 {0}".format(waiting))

# Hero = ["아이언맨", "토르", " 아이엠 그루트"]
# for customer in Hero:
#     print (" {0}님 출격 준비가 되었습니다".format(customer))

## while ##

# Hero = "토르"
# index = 5
# while index >=1:
#     print("{0}, 커피가 준비되었습니다. {1} 번 남았습니다.".format(Hero,index))
#     index -= 1
#     if index ==0:
#         print("커피는 폐기처분되었습니다.")

        ## while True: 는 break나 exit? 로 나가는거 아니면 무한루프로 돌아간다.
            ## 이럴때 대처법은 ctrl + C 누르면 강제종료된다.

# customer = "토르"
# person = "Unknown"

# while person != customer :
#     print("{0}, 커피가 준비되었습니다.".format(customer))
#     person = input("이름이 어떻게 되세요? ")

## continue / break ##
# absent = [2,5]
# no_book = [7]
# for student in range(1,11):
#     if student in absent:
#         continue
#     elif student in no_book:
#         print("오늘 수업은 여기까지 {0}는 교무실로 따라와".format(student))
#         break
#     print("{0}야 책을 읽어봐".format(student))

# students =[1,2,3,4,5]
# print(students)
# students = [i+100 for i in students] ## students에 1,2,3,4,5가 들어있는데 거기에 100을 더한값을 적용하는것.
# print(students)

# students = ["Iron amn","Thor", "I am groot"]
# students = [len(i) for i in students] ## 문자 길이
# print(students)

# students = [i for i in range(1,6)]
# print(students)

# students = ["Iron amn","Thor", "I am groot"]
# students = [i.upper() for i in students]
# print(students)

## 퀴즈 5 ##





## 함수 ##

# def open_account():
#         print("새로운 계좌가 생성되었습니다.")
# open_account()

# def deposit(balance, money): ## 예금의 정보
#         print("입금이 완료되었습니다. 잔액은 {0} 원 입니다.".format(balance + money)) 
#         return balance + money ## balance의 반환값을 balance + money 로 

# def withdraw(balance, money): ## balance =잔액
#         if balance >= money:
#                 print("출금이 완료되었습니다. 잔액은 {0}입니다.".format(balance-money))
#                 return balance-money
#         else:
#                 print("잔액이 부족하여 출금이 완료되지 않았습니다. 잔액은 {0}입니다.".format(balance))
#                 return balance

# def withdraw_night(balance, money): 
#         commission = 100
#         return commission, balance-money-commission ## 커미션과 최종 출금금액을 같이 보여줌



# balance = 0
# balance = deposit(balance, 1000)
# print(balance)

# commission, balance = withdraw_night(balance, 500)
# print("수수료{0}원이며, 잔액은 {1}원 입니다.".format(commission,balance))


## 기본값 ##

# def profile(name, age, main_lang): ## \하면 두문장처럼 보이지만 한문장이다
#         print("이름 : {0},\t 나이 : {1} \t 주 사용 언어: {2}"  \
#                 .format(name, age, main_lang))

# profile("유재석",20,"파이썬")
# profile("김태호",25,"자바")     



# def profile(name, age= 17, main_lang="파이썬"): ## 이렇게 안에 설정해놓으면 기본값으로 된다.
#         print("이름 : {0},\t 나이 : {1} \t 주 사용 언어: {2}"  \
#                 .format(name, age, main_lang))
# profile("유재석")
# profile("김태호")
    
# def profile(name, age, main_lang):
#         print(name, age, main_lang)

# profile(name="유재석",main_lang="파이썬",age=20)
# profile(main_lang="자바",age=25,name="김태호" )

## 가변 인자 ##

# def profile(name, age, lang1, lang2, lang3, lang4, lang5):
#         print("이름 : {0}\t 나이 : {1}\t".format(name, age), end=" ") ## end = "" 는 원래 줄바꿈으로 진행했으나, 그냥 이어쓰기로 한다는 뜻. 
#         print(lang1,lang2,lang3,lang4,lang5)

# profile("유재석",20,"파이썬","자바","C","","")
# profile("김태호",25,"swift","","","","")

# def profile(name, age, *language): ## 사용자가 원하는만큼 넣을수 있게함
#         print("이름 : {0}\t 나이 : {1}\t".format(name, age), end=" ") ## end = "" 는 원래 줄바꿈으로 진행했으나, 그냥 이어쓰기로 한다는 뜻. 
#         for lang in language: ## 그러므로 language 안에 포함된 것들은 lang에 넣어버리기
#                 print(lang, end="")
#         print()

# profile("유재석",20, "파이썬" ,"자바","C","C++")  ## 위에꺼의 장점은 위위에 꺼는 지정한 크기만큼만 쓸수 있지만 이것은 지정한 크기를 넘어서 계속 늘어나면서 쓸수 있기에
                                                        ## 편리하다.
# profile("김태호",25,"swift")

## 지역변수와 전역변수 ##
gun = 10
def checkpoint(soldiers): ## 경계근무
        global gun # 전역 공간에 있는 gun 사용 / 지역변수가 아닌 전체에서 gun이라는 것을 하나로 통일 하겠다는 뜻.   
        gun = gun - soldiers ## 여기서 두번째 gun = 'gun' - soldiers 의 'gun'은 지역변수라고 하며, 위에 gun = 10 의 gun이랑은 다른 함수이다. c언어에서도 따로 지정해야 했었다.
        print("[함수 내] 남은 총 : {0}".format(gun))

def checkpoint_ret(gun,soldiers):
        gun = gun - soldiers
        print("[함수 내] 남은 총 : {0}".format(gun))
        return gun ## 10 -2 = 8 값을 gun으로 최종값으로 호출해서 밑에 gun이 8이 됨

print("전체 총 : {0}".format(gun))
# checkpoint(2) ## 2명이 경계근무 나감
gun = checkpoint_ret(gun,2)


print("남은 총 : {0}".format(gun))        



