#include <stdio.h>

void swap(int a, int b);
void swap_addr(int *a, int *b);


int main(void)
{

	//int 철수 = 1;

	//printf("철수네 주소 : %d , 암호는 : %d\n", &철수, 철수);

	//int* 미션맨;

	//미션맨 = &철수;
	//printf("미션맨의 주소 : %d , 암호는 : %d\n", 미션맨, *미션맨);

	//미션맨 = &철수;
	//*미션맨 = *미션맨 * 3;
	//printf("미션맨의 주소: %d , 암호는 : %d\n", 미션맨, *미션맨);

	//int *스파이 = 미션맨;
	//스파이 = &철수;
	//*스파이 = *미션맨 - 1;
	//printf("스파이의 주소 : %d, 암호는 : %d\n", 스파이, *스파이);


	//printf("스파이의 행동의 결과\n");

	//printf("철수네 주소 : %d , 암호는 : %d\n", &철수, 철수);

	// 배열과 포인터

	//int arr[3] = { 5, 10, 15 };
	//int* ptr = arr;
	//for (int i = 0; i < 3; i++)
	//{
	//	// printf(" 배열 arr[ %d ] 의 값 : %d\n ", i, arr[i]); 
	//	printf(" 배열 arr[ %d ] 의 값 : %d\n ", i, *(arr+i)); // 위의 식과 같은 문장이다. arr 자체가 이미 배열로 되여 있으며, arr의 첫번째의 값을 가져오게 하는것.
	//}
	//for (int i = 0; i < 3; i++)
	//{
	//	printf("포인트 ptr[ %d ] 의 값 : %d\n", i, ptr[i]);
	//}

	//printf(" arr 자체의 값 : %d \n", arr);
	//printf(" arr[0] 자체의 값 : %d \n", &arr[0]);

	// *&는 아무것도 없는것과 같으며, 서로 상쇄되기 때문이다.

	int a = 100;
	int b = 20;

	printf("swap 함수 전 a : %d , b : %d \n", a, b);
	swap(a, b);
	printf("swap 함수 후 a : %d , b : %d \n", a, b);

	// 값만 복사한다는 의미로 Call by Value 라고 한다. 자세히 주소로 본다면 void 내의 a의 주소와 본문 내의 a는 주소가 서로 다르다.

	printf("swap 함수 전의 a의 주소 a : %d \n", &a);
	printf("swap 함수 전의 b의 주소 b : %d \n", &b); // 보다싶히 다르다.

	swap_addr(&a, &b);

	printf("주소값 전달한 swap 함수 후 a : %d , b : %d \n", a, b);

	return 0;
}


void swap(int a, int b)
{
	printf("swap 함수 내의 a의 주소 a : %d \n", &a);
	printf("swap 함수 내의 b의 주소 a : %d \n", &b);
	int temp = a;
	a = b;
	b = temp;

	printf("swap 함수 내 a : %d , b : %d\n", a, b);
}

void swap_addr(int *a, int *b)
{

	int temp = *a;
	*a = *b;
	*b = temp;

	printf("주소값 전달 .swap 함수 내 a : %d , b : %d\n", *a, *b);
}

